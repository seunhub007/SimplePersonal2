name: Deployment Workflow
on:
  push:
    branches:
      - master

jobs:
  preparation:
    runs-on: ubuntu-latest
    steps:
      - name: preparation
        run: echo "preparing the table ...."
        
      - name: checks out the repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      # Install EKSCTL
      - name: installing eksctl
        run: |
            # for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7`
            ARCH=amd64
            PLATFORM=$(uname -s)_$ARCH
        
            curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
        
            # (Optional) Verify checksum
            curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
        
            tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
        
            sudo mv /tmp/eksctl /usr/local/bin

      - name: creating cluster
        run: |
          eksctl create cluster --name simple \
          --nodegroup-name simple \
          --node-type t2.large \
          --nodes 4 \
          --nodes-max 4 \
          --nodes-min 2 \
          --managed
               
          
          
      - name: setup OIDC
        run: |
          cluster_name=simple
          oidc_id=$(aws eks describe-cluster --name $cluster_name --query "cluster.identity.oidc.issuer" --output text | cut -d '/' -f 5)
          aws iam list-open-id-connect-providers | grep $oidc_id | cut -d "/" -f4
          eksctl utils associate-iam-oidc-provider --cluster $cluster_name --approve

      - name: create a service account
        run: |
          echo "Creating service account..."
          cluster_name=simple
          eksctl create iamserviceaccount \
          --name ebs-csi-controller-sa \
          --namespace kube-system \
          --cluster $cluster_name \
          --role-name AmazonEKS_EBS_CSI_DriverRole \
          --role-only \
          --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
          --approve

      - name: add the EBS-CSI addon
        run: |
          cluster_name=simple
          echo "Adding EBS-CSI addon..."
          eksctl create addon --name aws-ebs-csi-driver --cluster $cluster_name --service-account-role-arn arn:aws:iam::675732258064:role/AmazonEKS_EBS_CSI_DriverRole --force
      

      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Install kubectl
        run: |
          sudo apt-get update && sudo apt-get install -y apt-transport-https
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubectl
              
      - name: Install Helm Package manager
        run: |
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install apt-transport-https --yes
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install helm -y

      - name: Helm Create
        run: | 
          helm create vip
          # ls my-chart  # Display the contents of the newly created Helm chart directory
    
      - name: Helm Template
        run: |
          helm template vip
    
      - name: Helm Install
        run: | 
          helm install vip vip     
          
     
      - name: Set up Helm
        uses: azure/setup-helm@v2
    
      - name: Copy Deployment and Service YAMLs
        run: |
          cp SP2-deployment.yaml vip/templates
          cp SP2-service.yaml vip/templates
          cp pvc.yaml vip/templates
          cp storageclass.yaml vip/templates
      
    
      # - name: Deploy Helm Chart
      #   run: |
      #     helm upgrade --install $ ./$my-chart
      
      - name: run kubectl
        run: |
          kubectl get pods
          kubectl get svc
          kubectl get pvc
              

     
        
        
      - name: "Logs into docker"
        uses: docker/login-action@v3
        with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}  
      - name: "Build our code"
        env:
          IMAGE_NAME: spcool
          VERSION: 1
          USERNAME: seun007
        run: |
            docker build -t $USERNAME/$IMAGE_NAME:$VERSION .
            docker push $USERNAME/$IMAGE_NAME:$VERSION


        

            